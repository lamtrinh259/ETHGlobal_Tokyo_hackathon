[["0",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all tokens held by vitalik.eth on Ethereum\n\nquery getAllTokensBy {\n  TokenBalances(input: {filter: { owner: {_eq: \"vitalik.eth\"}}, limit: 10, blockchain: ethereum}) {\n    TokenBalance {\n      amount\n      chainId\n      id\n      lastUpdatedBlock\n      lastUpdatedTimestamp\n      owner {\n        addresses\n      }\n      tokenAddress\n      tokenId\n      token {\n        name\n        symbol\n      }\n    }\n  }\n}","metadata":{"source":"/Users/wilson/Dropbox (Maestral)/Code/ethglobal-tokyo-hackathon/apps/backend/documents/prompt1.txt"}}],["1",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all Farcaster usernames and Eth associated addresses\n\nquery GetAllFarcasterUsernamesAndEthAddresses {\n  Socials(input: {filter: {dappName: {_eq: farcaster}}, blockchain: ethereum, limit: 10}) {\n    Social {\n      profileName\n      userAssociatedAddresses\n    }\n  }\n}","metadata":{"source":"/Users/wilson/Dropbox (Maestral)/Code/ethglobal-tokyo-hackathon/apps/backend/documents/prompt2.txt"}}],["2",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor this list of ENS addresses, show me all NFTs they own, including images: dwr.eth, vitalik.eth, balajis.eth\n\nquery MyQuery {\n  TokenBalances(\n    input: {filter: {owner: {_in: [\"dwr.eth\", \"vitalik.eth\", \"balajis.eth\"]}, tokenType: {_in: [ERC1155, ERC721]}}, blockchain: ethereum, limit: 10}\n  ) {\n    TokenBalance {\n      tokenAddress\n      amount\n      owner {\n        addresses\n        primaryDomain {\n          id\n        }\n        domains {\n          id\n        }\n      }\n      tokenNfts {\n        contentValue {\n          image {\n            extraSmall\n            small\n            medium\n            large\n            original\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/Users/wilson/Dropbox (Maestral)/Code/ethglobal-tokyo-hackathon/apps/backend/documents/prompt3.txt"}}],["3",{"pageContent":"The TokenNFTs API provides detailed data about a specific NFT token within an NFT Collection, either an ERC721 or ERC1155 contract. You can use this API to return token-specific metadata, including traits, and resized images.\n\ninput TokenNftFilter {\n  address: # Contract address (ERC721, ERC1155)\n  metaData: # allows querying by NFT Token Name, or specific trait or attribute.\n  tokenId: # Unique NFT token ID\n}\n\ntype TokenNft {\n  address: Address! # NFT contract address on the blockchain\n  blockchain: Blockchain # Blockchain where the NFT token is deployed\n  chainId: String! # Airstack unique identifier for the blockchain\n  contentType: String # Content type of the NFT token (image, video, audio, etc.)\n  contentValue: Media # NFT Media - resized images, animation, videos, etc.\n  #currentHolderCount: # Number of current holders of the token NFT - being fixed\n  id: # Airstack unique identifier for the NFT token\n  lastTransferBlock: # Block number of the token NFT's most recent transfer\n  lastTransferHash: # Hash of the token NFT's most recent transfer\n  lastTransferTimestamp: # Timestamp of the token NFT's most recent transfer\n  metaData: NftMetadata # Metadata associated with the NFT token\n  nftSaleTransactions: # **Nested query** allowing to retrieve token sale transactions\n  rawMetaData: # NFT token metadata as defined in the contract\n  token: # **Nested query** allowing to query contract level data\n  tokenBalances: # **Nested query** with token balance data & owner data\n  tokenId: IntString! # Unique NFT token ID\n  tokenTransfers: # **Nested query** with token transfers data\n  tokenURI: String # URI for the token NFT's resources\n  totalSupply: String # Total supply of the NFT token\n  type: TokenType # Type of NFT - ERC721 or ERC1155\n}","metadata":{"source":"/Users/wilson/Dropbox (Maestral)/Code/ethglobal-tokyo-hackathon/apps/backend/documents/tokennfts.txt"}}]]