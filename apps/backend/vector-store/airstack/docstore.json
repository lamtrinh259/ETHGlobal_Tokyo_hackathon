[["0",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all tokens held by vitalik.eth on Ethereum\n\nquery getAllTokensBy {\n  TokenBalances(input: {filter: { owner: {_eq: \"vitalik.eth\"}}, limit: 10, blockchain: ethereum}) {\n    TokenBalance {\n      amount\n      chainId\n      id\n      lastUpdatedBlock\n      lastUpdatedTimestamp\n      owner {\n        addresses\n      }\n      tokenAddress\n      tokenId\n      token {\n        name\n        symbol\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt1.txt"}}],["1",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all the token holders and their ENS names for Tether\n\nquery GetTokenBalances {\n  TokenBalances(\n    input: {blockchain: ethereum, limit: 10, filter: {tokenAddress: {_eq: \"0xdac17f958d2ee523a2206206994597c13d831ec7\"}}}\n  ) {\n    TokenBalance {\n      amount\n      chainId\n      owner {\n        addresses\n        domains {\n          id\n          name\n          owner\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt10.txt"}}],["2",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all the token holders and their ENS names for Nouns DAO\n\nquery GetTokenHolders {\n  TokenBalances(\n    input: {filter: {tokenAddress: {_eq: \"0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03\"}}, limit: 10, blockchain: ethereum}\n  ) {\n    TokenBalance {\n      owner {\n        addresses\n        primaryDomain {\n          name\n        }\n        domains {\n          name\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt11.txt"}}],["3",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor the Ethereum token Matic, show me all token holders and the NFTs they hold\n\nquery GetTokenHolders {\n  TokenBalances(\n    input: {blockchain: ethereum, filter: {tokenAddress: {_eq: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\"}}, limit: 10}\n  ) {\n    TokenBalance {\n      owner {\n        identity\n        addresses\n        tokenBalances {\n          tokenNfts {\n            tokenId\n            contentType\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt12.txt"}}],["4",{"pageContent":"Get all meta data about the BAYC NFT collection including a summary of the traits distribution\n\n```GraphQL\nquery QB1 {\n  Tokens(input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}}, blockchain: ethereum}) {\n    Token {\n      address\n      baseURI\n      chainId\n      contractMetaDataURI\n      decimals\n      id\n      lastTransferBlock\n      lastTransferHash\n      lastTransferTimestamp\n      name\n      rawContractMetaData\n      symbol\n      tokenBalances {\n        owner {\n          addresses\n        }\n        amount\n      }\n      tokenNfts {\n        id\n        tokenId\n        tokenURI\n        metaData {\n          name\n        }\n        contentValue {\n          image {\n            large\n            medium\n            original\n            small\n            extraSmall\n          }\n        }\n      }\n      tokenTraits\n      totalSupply\n      type\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}\n```","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt13.txt"}}],["5",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all Farcaster usernames and Eth associated addresses\n\nquery GetAllFarcasterUsernamesAndEthAddresses {\n  Socials(input: {filter: {dappName: {_eq: farcaster}}, blockchain: ethereum, limit: 10}) {\n    Social {\n      profileName\n      userAssociatedAddresses\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt2.txt"}}],["6",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor this list of ENS addresses, show me all NFTs they own, including images: dwr.eth, vitalik.eth, balajis.eth\n\nquery GetNFTsByENSAddresses {\n  TokenBalances(\n    input: {filter: {owner: {_in: [\"dwr.eth\", \"vitalik.eth\", \"balajis.eth\"]}, tokenType: {_in: [ERC1155, ERC721]}}, blockchain: ethereum, limit: 10}\n  ) {\n    TokenBalance {\n      tokenAddress\n      amount\n      owner {\n        addresses\n        primaryDomain {\n          id\n        }\n        domains {\n          id\n        }\n      }\n      tokenNfts {\n        contentValue {\n          image {\n            extraSmall\n            small\n            medium\n            large\n            original\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt3.txt"}}],["7",{"pageContent":"Here is an example prompt to generate a graphQL query: \nShow me all Milady token holders, their ENS names, and the token images\n\nquery MiladyHoldersENSAndImages {\n  TokenBalances(\n    input: {filter: {tokenAddress: {_eq: \"0x5Af0D9827E0c53E4799BB226655A1de152A425a5\"}, tokenType: {_in: [ERC1155, ERC721]}}, blockchain: ethereum, limit: 50}\n  ) {\n    TokenBalance {\n      owner {\n        addresses\n        primaryDomain {\n          name\n        }\n        domains {\n          name\n        }\n      }\n      tokenNfts {\n        contentValue {\n          image {\n            original\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt4.txt"}}],["8",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all tokens held by wallet address 0x540cb04ebab67e05a620b97bb367ac5e4ed68f09\n\nquery GetTokensByWalletAddress {\n  TokenBalances(input: {filter: { owner: {_eq: \"0x540cb04ebab67e05a620b97bb367ac5e4ed68f09\"}}, limit: 10, blockchain: ethereum}) {\n    TokenBalance {\n      amount\n      chainId\n      id\n      lastUpdatedBlock\n      lastUpdatedTimestamp\n      owner {\n        addresses\n      }\n      tokenAddress\n      tokenId\n      tokenType\n      token {\n        name\n        symbol\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt5.txt"}}],["9",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all metadata about the BAYC NFT collection including a summary of the traits distribution\n\nquery GetNFTMetadata {\n  Tokens(input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}}, blockchain: ethereum}) {\n    Token {\n      address\n      baseURI\n      chainId\n      contractMetaDataURI\n      decimals\n      id\n      lastTransferBlock\n      lastTransferHash\n      lastTransferTimestamp\n      name\n      rawContractMetaData\n      symbol\n      tokenBalances {\n        owner {\n          addresses\n        }\n        amount\n      }\n      tokenNfts {\n        id\n        tokenId\n        tokenURI\n        metaData {\n          name\n        }\n        contentValue {\n          image {\n            large\n            medium\n            original\n            small\n            extraSmall\n          }\n        }\n      }\n      tokenTraits\n      totalSupply\n      type\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt6.txt"}}],["10",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGive me recent transfers of DAI token\n\nquery RecentDaiTransfers {\n  TokenTransfers(\n    input: {\n      filter: {tokenAddress: {_eq: \"0x6b175474e89094c44da98b954eedeac495271d0f\"}},\n      blockchain: ethereum,\n      limit: 10,\n      order: {blockTimestamp: DESC}\n    }\n  ) {\n    TokenTransfer {\n      amount\n      blockNumber\n      blockTimestamp\n      from {\n        addresses\n      }\n      to {\n        addresses\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt7.txt"}}],["11",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor ENS dwr.eth, get Farcaster name, Farcaster account details, connected address, and all token balances and images\n\nquery GetIdentity {\n  Wallet(input: {identity: \"dwr.eth\"}) {\n    socials {\n      dappName\n      profileName\n      profileCreatedAtBlockTimestamp\n      userAssociatedAddresses\n    }\n    tokenBalances {\n      tokenAddress\n      amount\n      tokenId\n      tokenType\n      tokenNfts {\n        contentValue {\n          image {\n            original\n          }\n        }\n        token {\n          name\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt8.txt"}}],["12",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet the token transfer history of the Mutant Apes NFT Collection on Ethereum\n\nquery GetTokenTransferHistroy {\n  TokenTransfers(\n    input: {filter: {tokenAddress: {_eq: \"0x60e4d786628fea6478f785a6d7e704777c86a7c6\"}}, blockchain: ethereum}\n  ) {\n    TokenTransfer {\n      amount\n      amounts\n      blockNumber\n      blockTimestamp\n      blockchain\n      chainId\n      from {\n        addresses\n      }\n      to {\n        addresses\n      }\n      tokenType\n    }\n  }\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt9.txt"}}],["13",{"pageContent":"The TokenBalances API covers the owners and balances of ERC20, ERC721, and ERC1155 tokens.\n\nThese are the available filters for the TokenBalances API:\n\ninput TokenBalanceFilter {\n  owner: # Identity: blockchain address, domain name, social identity\n  tokenAddress: # Token contract address on the blockchain (ERC20, ERC721, ERC1155)\n  tokenId: # Unique NFT token ID\n  tokenType: # ERC20, ERC721, ERC1155\n}\n\nThis is the schema for the TokenBalances API:\n\ntype TokenBalance {\n  amount: String! # Token balance amount\n  blockchain: Blockchain # Blockchain where the token balance is located\n  chainId: String! # Airstack unique identifier for the blockchain\n  id: ID! # Airstack unique identifier for the data point\n  lastUpdatedBlock: Int! # Block number when the token balance was last updated\n  lastUpdatedTimestamp: Time # Timestamp when the token balance was last updated\n  owner: Wallet! # **Nested query** allowing to retrieve address, domain names, and social profiles of the owner\n  token: Token # **Nested query** to get token contract level data\n  tokenAddress: Address! # Token contract address\n  tokenId: String # Unique NFT token ID, if applicable\n  tokenNfts: # **Nested query** allowing to get NFT token data (images, traits, etc.)\n  tokenTransfer: # **Nested query** with token transfer history and details\n  tokenType: TokenType # ERC20, ERC721, or ERC1155\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokenBalances.txt"}}],["14",{"pageContent":"The TokenTransfers API delivers information on token transfers between wallets & contracts.\n\nThese are the available filters for the TokenTransfers API:\n\ninput TokenTransferFilter {\n  from: # Identity: blockchain address, domain name, social identity\n  to: # Identity: blockchain address, domain name, social identity\n  tokenAddress: # Token contract address (ERC20, ERC721, ERC1155(\n  tokenId: # Unique NFT token ID\n  tokenType: # ERC20, ERC721, ERC1155\n  transactionHash: # transaction hash\n}\n\nThis is the schema for the TokenTransfers API:\n\ntype TokenTransfer {\n  amount: String # Amount transferred in the token transfer\n  amounts: [String] # ERC1155 batch transfer specific amounts\n  blockchain: Blockchain # Blockchain where the token transfer took place\n  blockNumber: Int # Block number of the token transfer\n  blockTimestamp: Time # Timestamp of the token transfer\n  chainId: String # Airstack unique identifier for the blockchain\n  from:  # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\n  id: ID # Airstack unique identifier for the token transfer\n  operator:  # **Nested query** - operator (contract) wallet-related information, including address, domains, social profile, other token balances, and transfer history.\n  to:  # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\n  token: Token # **Nested query** - token contract level information\n  tokenAddress: Address # Token contract address\n  tokenId: String # Token ID associated with the token transfer, if applicable\n  tokenIds: [String] # List of token IDs associated with the token transfer, if applicable\n  tokenNft: TokenNft # **Nested query** - individual NFT token level data\n  tokenType: TokenType # Token type (ERC20, ERC721, or ERC1155)\n  transactionHash: String! # Transaction hash of the token transfer\n  type: String # Type of the token transfer\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokenTransfers.txt"}}],["15",{"pageContent":"The TokenNFTs API provides detailed data about a specific NFT token within an NFT Collection, either an ERC721 or ERC1155 contract. You can use this API to return token-specific metadata, including traits, and resized images.\n\nThese are the available filters for the TokenNFTs API:\n\ninput TokenNftFilter {\n  address: # Contract address (ERC721, ERC1155)\n  metaData: # allows querying by NFT Token Name, or specific trait or attribute.\n  tokenId: # Unique NFT token ID\n}\n\nThis is the schema for the Wallet API:\n\ntype TokenNft {\n  address: Address! # NFT contract address on the blockchain\n  blockchain: Blockchain # Blockchain where the NFT token is deployed\n  chainId: String! # Airstack unique identifier for the blockchain\n  contentType: String # Content type of the NFT token (image, video, audio, etc.)\n  contentValue: Media # NFT Media - resized images, animation, videos, etc.\n  #currentHolderCount: # Number of current holders of the token NFT - being fixed\n  id: # Airstack unique identifier for the NFT token\n  lastTransferBlock: # Block number of the token NFT's most recent transfer\n  lastTransferHash: # Hash of the token NFT's most recent transfer\n  lastTransferTimestamp: # Timestamp of the token NFT's most recent transfer\n  metaData: NftMetadata # Metadata associated with the NFT token\n  nftSaleTransactions: # **Nested query** allowing to retrieve token sale transactions\n  rawMetaData: # NFT token metadata as defined in the contract\n  token: # **Nested query** allowing to query contract level data\n  tokenBalances: # **Nested query** with token balance data & owner data\n  tokenId: IntString! # Unique NFT token ID\n  tokenTransfers: # **Nested query** with token transfers data\n  tokenURI: String # URI for the token NFT's resources\n  totalSupply: String # Total supply of the NFT token\n  type: TokenType # Type of NFT - ERC721 or ERC1155\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokennfts.txt"}}],["16",{"pageContent":"The Tokens API retrieves high-level information on ERC20 tokens, ERC721 tokens (also known as NFT contracts, \"Collections,\" or \"NFT Collections,\" containing multiple tokens), and ERC1155 tokens (also called NFT contracts, \"Collections,\" or \"NFT Collections,\" containing several tokens).\n\nThese are the available filters for the Tokens API:\n\ninput TokenFilter {\n  address: # Token contract address on the blockchain (ERC20, ERC721, ERC1155)\n  name:  # Name of the contract (e.g. \"Moonbirds\"). Note that this will fetch all contracts with the name \"Moonbirds\"\n  symbol: # Symbol of the contract (e.g. \"BAYC\"). Note - it will return all contracts that have the same symbol.\n  type: # ERC20, ERC721, ERC1155\n}\n\nThis is the schema for the Tokens API:\n\ntype Token {\n  address: Address! # Token contract address on the blockchain\n  baseURI: String # Returns the base URI\n  blockchain: Blockchain # Blockchain where the token is deployed\n  chainId: String # Airstack unique identifier for the blockchain\n  contractMetaData: ContractMetadata # Token's contract metadata object\n  contractMetaDataURI: String # URI for the token's contract metadata\n  currentHolderCount: Int # Number of current token holders\n  decimals: Int # Number of decimal places for the token's smallest unit\n  id: ID # Airstack unique identifier for the contract\n  lastTransferBlock: Int # Block number of the token's most recent transfer\n  lastTransferHash: String # Hash of the token's most recent transfer\n  lastTransferTimestamp: Time # Timestamp of the token's most recent transfer\n  logo: # Logo image for the contract in various sizes (if available)\n  name: String # Token contract name\n  rawContractMetaData: # Token contract metadata as it appears inside the contact\n  symbol: String # Token contract symbol (ticker)\n  tokenBalances: # **Nested query** - allows querying Token Balance information\n  tokenNfts: # **Nested query** - individual NFT token data\n  tokenTraits: Map # Returns count of all token attribute types and values\n  totalSupply: String # Total supply of the token\n  type: Tokentype # ERC20, ERC721, or ERC1155\n}\n```\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokens.txt"}}],["17",{"pageContent":"The Wallet APIs deliver comprehensive data about a specific wallet address, including the tokens they currently possess, the domain names they own, their token transfer and sale history, and their on-chain social profiles (like ENS, Farcaster).\n\nFrom the Wallet API it’s possible to create complex queries using nested queries, such as: Get the primary ENS, the Farcaster user name, the Farcaster connected Addresses, all tokens held by the wallet, all NFT Sales by the wallet, all token transfers.\n\nThese are the available filters for the Wallet API:\n\ninput WalletInput {\n  identity: # Identity: blockchain address, domain name, social identity\n}\n\nThis is the schema for the Wallet API:\n\ntype Wallet {\n  addresses: Addresses! # returns addresses associated with the identity input\n  domains: # Nested query - allows querying domains owned by the address\n  identity: # return identity passed from the input\n  nftSaleTransactions: # Nested query - allows querying NFT Sales by the address\n  primaryDomain: # Nested query - allows returning primary domains, if applicable\n  socials: # returns social profile information related to the address\n  tokenBalances: # Nested query - allows returning token balances\n  tokenTransfers: # Nested query - allows returning token transfers and related information\n\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/wallets.txt"}}]]