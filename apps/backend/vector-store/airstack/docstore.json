[["0",{"pageContent":"Airstack Identity API has been integrated throughout all of the GraphQL queries! You can filter your queries using the identity inputs by passing the following values instead of a blockchain address:\nENS input - uses resolved address to get the data.\nYou can enter ENS address directly in the “address” field, for example:\nvitalik.eth\nens:vitalik.eth - “ens:” prefix is optional\nFarcaster input.\nYou can enter Farcaster inputs in the “address” field as follows:\nfc_fid:5650 - use “fc_fid:” prefix followed by the Farcaster user ID\nfc_fname:vbuterin - use “fc_fname:” prefix followed by the Farcaster user ID\nAlternatively, you can enter the Farcaster profile name directly in the Socials profileName field.\n\nExample: ID1 Show me all NFTs and their images currently being held by Farcaster user: dwr\nquery ID1 {\n  TokenBalances(input: {filter: {owner: {_eq: \"fc_fname:dwr\"}, tokenType: {_in: [ERC721, ERC1155]}}, blockchain: ethereum}) {\n    TokenBalance {\n      tokenNfts {\n        address\n        tokenId\n        contentValue {\n          image {\n            medium\n          }\n        }\n        token {\n          name\n        }\n      }\n    }\n  }\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/AirstackIdentityAPI.txt"}}],["1",{"pageContent":"The CollectionStats API offers aggregated data for NFT collections (ERC721 and ERC1155) at the collection level.\nTimeframe filter details (all times are in UTC) for when the sale transactions are captured for the aggregation:\nDaily - starts from 00:00 am to 11:59 pm every day\nWeekly - starts from 00:00 am on Monday to 11:59 pm on the same week Sunday\nMonthly - 00:00 am on the first calendar day of the month to 11:59 pm on the last calendar day of the month. If querying the current month, the aggregation would be from the first calendar day to the most recent daily aggregation.\nYearly - 00:00 am on the first day of the year to 11:59 pm on the last day of the year. If querying the current year, the aggregation would be from the first calendar day to the most recent daily aggregation.\nLifetime - from the first recorded sale of the NFT inside a collection to the most recent daily aggregation.\n\nAPI Inputs & Filters\ninput CollectionStatFilter {\naverageSalePriceInUSDC:\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\nfirstTransactionBlockTimestamp:\nhighestSalePriceInUSDC:\nlastTransactionBlockTimestamp:\nlowestSalePriceInUSDC:\ntokenAddress: # NFT contract address on the blockchain\ntotalSalesCount:\ntotalSaleVolumeInUSDC:\ntimeframe: DAILY / WEEKLY / MONTHLY / YEARLY / LIFETIME\n}\n\nOutputs\ntype CollectionStat {\naverageSalePriceInNativeToken: Float\naverageSalePriceInUSDC: Float\nblockchain: Blockchain # Blockchain where the NFT contract is deployed\nchainId: String # Unique blockchain identifier\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\ndappVersion: String # Airstack unique dappVersion number\nfirstTransactionBlockTimestamp: Time\nhighestSalePriceInNativeToken: Float\nhighestSalePriceInUSDC: Float\nhighestSaleTransactionId: String\nid: ID! # Airstack unique identifier for this particular element\nlastTransactionBlockTimestamp: Time\nlowestSalePriceInNativeToken: Float\nlowestSalePriceInUSDC: Float\nlowestSaleTransactionId: String\ntimeFrame: TimeFrames # DAILY / WEEKLY / MONTHLY / YEARLY / LIFETIME\ntoken: # **Nested query** allowing to query contract level data\ntokenAddress: Address! # NFT contract address on the blockchain\ntotalFeeVolumeInNativeToken: Float\ntotalFeeVolumeInUSDC: Float\ntotalRoyaltyFeeVolumeInNativeToken: Float\ntotalRoyaltyFeeVolumeInUSDC: Float\ntotalSalesCount: Int\ntotalSaleVolumeInNativeToken: Float\ntotalSaleVolumeInUSDC: Float\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/CollectionStatsAPI.txt"}}],["2",{"pageContent":"If you would like to run a query which fetches information from multiple blockchains, you can simply pass multiple inputs inside a single query.\n\nExample:\nquery Wallet {\n# first query on Polygon\n  polygon: Wallet(input: {blockchain: polygon, identity: \"vitalik.eth\"}) {\n    addresses\n    tokenTransfers {\n      transactionHash\n    }\n    tokenBalances {\n      amount\n      tokenType\n      tokenAddress\n    }\n  }\n# second query on Ethereum\n  ethereum: Wallet(input: {blockchain: ethereum, identity: \"vitalik.eth\"}) {\n    addresses\n    tokenTransfers {\n      transactionHash\n    }\n    tokenBalances {\n      amount\n      tokenType\n      tokenAddress\n    }\n  }\n}\n\nMake sure to use aliases before the queries to differentiate between chains. IN the above query the aliases are \"polygon:\" and \"ethereum\".\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/CrossChainQueries.txt"}}],["3",{"pageContent":"The MarketplaceStats API retrieves aggregated information for a particular NFT marketplace.\nTimeframe filter details (all times are in UTC) for when the sale transactions are captured for the aggregation:\nDaily - starts from 00:00 am to 11:59 pm every day\nWeekly - starts from 00:00 am on Monday to 11:59 pm on the same week Sunday\nMonthly - 00:00 am on the first calendar day of the month to 11:59 pm on the last calendar day of the month. If querying the current month, the aggregation would be from the first calendar day to the most recent daily aggregation.\nYearly - 00:00 am on the first day of the year to 11:59 pm on the last day of the year. If querying the current year, the aggregation would be from the first calendar day to the most recent daily aggregation.\nLifetime - from the first recorded sale to the most recent daily aggregation.\n\nInputs & Filters\ninput MarketplaceStatFilter {\naverageSalePriceInUSDC:\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\nfirstTransactionBlockTimestamp:\nhighestSalePriceInUSDC:\nlastTransactionBlockTimestamp:\nlowestSalePriceInUSDC:\ntotalSalesCount:\ntotalSaleVolumeInUSDC:\ntimeframe: DAILY / WEEKLY / MONTHLY / YEARLY / LIFETIME\n}\n\nOutputs\ntype MarketplaceStat {\naverageSalePriceInNativeToken: Float\naverageSalePriceInUSDC: Float\nblockchain: Blockchain # Blockchain where the NFT sale transaction took place\nchainId: String # Unique blockchain identifier\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\ndappVersion: String # Airstack unique dapp version number\nfirstTransactionBlockTimestamp: Time\nhighestSalePriceInNativeToken: Float\nhighestSalePriceInUSDC: Float\nhighestSaleTransactionId: String\nid: ID! # Airstack unique identifier for this particular element\nlastTransactionBlockTimestamp: Time\nlowestSalePriceInNativeToken: Float\nlowestSalePriceInUSDC: Float\nlowestSaleTransactionId: String\ntimeFrame: TimeFrames # DAILY / WEEKLY / MONTHLY / YEARLY / LIFETIME\ntotalFeeVolumeInNativeToken: Float\ntotalFeeVolumeInUSDC: Float\ntotalRoyaltyFeeVolumeInNativeToken: Float\ntotalRoyaltyFeeVolumeInUSDC: Float\ntotalSalesCount: Int\ntotalSaleVolumeInNativeToken: Float\ntotalSaleVolumeInUSDC: Float\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/MarketplaceStatsAPI.txt"}}],["4",{"pageContent":"Get the sales history and royalties for the Doodles NFT collection on Ethereum\n\n{\n  NFTSaleTransactions(\n    input: {filter: {dappName: {_eq: opensea}, nfts: {tokenAddress: {_eq: \"0x8a90cab2b38dba80c64b7734e58ee1db38b8992e\"}}}, blockchain: ethereum, limit: 10}\n  ) {\n    NFTSaleTransaction {\n      id\n      from {\n        identity\n      }\n      to {\n        identity\n      }\n      paymentAmount\n      paymentToken {\n        symbol\n      }\n      blockTimestamp\n      nfts {\n        tokenId\n      }\n      royalties {\n        beneficiaryAddress\n        amount\n        formattedAmount\n      }\n    }\n    pageInfo {\n      prevCursor\n      nextCursor\n    }\n  }\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/NFTSalestransactionsAPI_examples.txt"}}],["5",{"pageContent":"The NFTStats API provides aggregated data for a specific NFT token within a collection (both ERC721 and ERC1155).\nTimeframe filter details (all times are in UTC) for when the sale transactions are captured for the aggregation:\nDaily - starts from 00:00 am to 11:59 pm every day\nWeekly - starts from 00:00 am on Monday to 11:59 pm on the same week Sunday\nMonthly - 00:00 am on the first calendar day of the month to 11:59 pm on the last calendar day of the month. If querying the current month, the aggregation would be from the first calendar day to the most recent daily aggregation.\nYearly - 00:00 am on the first day of the year to 11:59 pm on the last day of the year. If querying the current year, the aggregation would be from the first calendar day to the most recent daily aggregation.\nLifetime - from the first recorded sale of the NFT to the most recent daily aggregation.\n\nInputs and Filters\ninput NFTStatFilter {\naverageSalePriceInUSDC:\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\nfirstTransactionBlockTimestamp:\nhighestSalePriceInUSDC:\nlastTransactionBlockTimestamp:\nlowestSalePriceInUSDC:\ntokenAddress: # NFT contract address on the blockchain\ntokenId: # Unique NFT token ID\ntotalSalesCount:\ntotalSaleVolumeInUSDC:\ntimeframe: DAILY / WEEKLY / MONTHLY / YEARLY / LIFETIME\n}\n\nOutputs\ntype CollectionStat {\naverageSalePriceInNativeToken: Float\naverageSalePriceInUSDC: Float\nblockchain: Blockchain # Blockchain where the NFT sale transaction took place\nchainId: String # Unique blockchain identifier\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\ndappVersion: String # Airstack unique dappVersion number\nfirstTransactionBlockTimestamp: Time\nhighestSalePriceInNativeToken: Float\nhighestSalePriceInUSDC: Float\nhighestSaleTransactionId: String\nid: ID! # Airstack unique identifier for this particular element\nlastTransactionBlockTimestamp: Time\nlowestSalePriceInNativeToken: Float\nlowestSalePriceInUSDC: Float\nlowestSaleTransactionId: String\ntimeFrame: TimeFrames # DAILY / WEEKLY / MONTHLY / YEARLY / LIFETIME\ntokenAddress: Address! # NFT contract address on the blockchain\ntokenNft: # **Nested query** allowing to get NFT token data (images, traits, etc.)\ntokenId: # Unique NFT token ID\ntotalFeeVolumeInNativeToken: Float\ntotalFeeVolumeInUSDC: Float\ntotalRoyaltyFeeVolumeInNativeToken: Float\ntotalRoyaltyFeeVolumeInUSDC: Float\ntotalSalesCount: Int\ntotalSaleVolumeInNativeToken: Float\ntotalSaleVolumeInUSDC: Float\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/NFTStatsAPI.txt"}}],["6",{"pageContent":"The NFTSaleTransactions API retrieves ERC721 and ERC1155 token sale transactions that have occurred on NFT marketplaces.\n\ninput NFTSaleTransactionFilter {\nblockTimestamp: # Allows entering blockTimestamp to filter transactions which happened in specific periods\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\nfrom: # Identity: blockchain address, domain name, social identity\nto: # Identity: blockchain address, domain name, social identity\nnfts: # ** Nested query ** input token contract address and/or NFT token ID\ntransactionHash: # Allows filtering to a specific transaction\n}\n\ntype NFTSaleTransaction {\nblockchain: Blockchain # Blockchain where the NFT sale transaction took place\nblockNumber: Int #Block number of the NFT sale transaction\nblockTimestamp: Time #Timestamp of the NFT sale transaction\nchainId: String # Unique blockchain identifier\ncollection: Token # **Nested query** to get NFT contract level data\ndappName: # Marketplace DApp name\ndappSlug: # Marketplace DApp slug (contract version)\ndappVersion: String # Airstack unique dappVersion number\nfeeAmount: String # Fee amount for the NFT sale transaction\nfeeAmountInNativeToken: String # Fee amount in blockchain native token for the NFT sale transaction\nfeeAmountInUSDC: String # Fee amount in USDC for the NFT sale transaction\nfeeBeneficiary: # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\nformattedFeeAmount: Float # Formatted fee amount for the NFT sale transaction\nformattedFeeAmountInNativeToken: Float # Formatted fee amount in blockchain native token\nformattedFeeAmountInUSDC: Float # Formatted fee amount in USDC\nformattedPaymentAmount: Float # Formatted payment amount for the NFT sale transaction\nformattedPaymentAmountInNativeToken: Float # Formatted payment amount in the native token\nformattedPaymentAmountInUSDC: Float # Formatted payment amount in USDC\nfrom: # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\nid: ID # Airstack unique identifier for the NFT sale transaction\nnfts: TokenNft # **Nested query** - individual NFT token level data, such as an address, amount, ID, metadata\npaymentAmount: String # Payment amount\npaymentAmountInNativeToken: String # Payment amount in blockchain native token\npaymentAmountInUSDC: String # Payment amount in USDC\npaymentToken: Token # **Nested query** to get token contract level data\npaymentTokenPriceInNativeToken: Float # Price of the payment token in blockchain native token\npaymentTokenPriceInUSDC: Float # Price of the payment token in USDC\nroyalties: [Royalty] # Information on sale royalties: amount, beneficiary address\nto:  # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\ntransactionHash: String # Transaction hash of the NFT sale transaction\ntransactionType: String # Type of the NFT transaction (e.g., \"sale\")\n}\n\nAirstack currently includes sales on OpenSea and Rarible. More marketplaces are being added.\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/NFTtransactionsAPI.txt"}}],["7",{"pageContent":"API Reference\nAirstack uniquely enables complex queries/responses across multiple on-chain and off-chain data sources.\n\nHere are some high level pointers:\n\nThe Airstack Identity API has been integrated throughout all of the GraphQL queries! You can filter your queries using identity fields such as address, ENS, Farcaster, and more.\n​\nNested Queries enable you to query across the entire data set from any of the APIs. This allows you to write complex simultaneous queries/responses all-at-once vs. having to daisy-chain multiple queries.\n​\n​Logical comparators & complex queries\n​\nIn GraphQL, logical comparators like _and , _nor, and _or are used to combine multiple filtering conditions, allowing you to create more complex queries.\n​\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/api_reference.txt"}}],["8",{"pageContent":"Show me the NFT pictures on Ethereum held by paradigm.eth\n\nquery NFTPicturesHeldByParadigmEth {\n  TokenBalances(\n    input: {filter: {owner: {_eq: \"paradigm.eth\"}, tokenType: {_in: [ERC1155, ERC721]}}, blockchain: ethereum, limit: 50}\n  ) {\n    TokenBalance {\n      tokenNfts {\n        contentValue {\n          image {\n            original\n          }\n        }\n      }\n      owner {\n        primaryDomain {\n          name\n        }\n      }\n    }\n  }\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/demo_example_1.txt"}}],["9",{"pageContent":"Get the monthly stats for The Currency NFT collection. The collection address is 0xaaDc2D4261199ce24A4B0a57370c4FCf43BB60aa.\n\n{\n  CollectionStats(\n    input: {filter: {tokenAddress: {_eq: \"0xaaDc2D4261199ce24A4B0a57370c4FCf43BB60aa\"}}, blockchain: ethereum, timeFrame: MONTHLY, limit: 50}\n  ) {\n    CollectionStat {\n      id\n      tokenAddress\n      firstTransactionBlockTimestamp\n      lastTransactionBlockTimestamp\n      totalSalesCount\n      averageSalePriceInUSDC\n      lowestSalePriceInUSDC\n      highestSalePriceInUSDC\n      totalSaleVolumeInUSDC\n      dappVersion\n      blockchain\n      lowestSalePriceInNativeToken\n      totalSaleVolumeInNativeToken\n      averageSalePriceInNativeToken\n    }\n  }\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/demo_example_2.txt"}}],["10",{"pageContent":"About Airstack\nWeb3 data APIs for developers\nInstantly integrate on-chain and off-chain data into any application.\nAirstack is a web3 developer platform that provides powerful APIs for integrating on-chain and off-chain data into any application. With Airstack developers are able to easily connect their applications to the web3 ecosystem.\nAirstack enables GraphQL queries that combine on-chain and off-chain data from multiple sources in a single response. Our goal is to enable developers to query and integrate relevant web3 data and serve it up to users without requiring heavy infrastructure or even a back-end.\nAirstack identity APIs map addresses and transactions across various sources, including ENS, Farcaster, Lens, POAP, Dapps, and Marketplaces.\nKey Features\nGraphQL APIs. Get the exact data you need in easy-to-integrate formats; no back-end is required.\nAI Automation. Query with natural language. No code required to get started.\nComplex made easy. Query across multiple projects, wallets, and blockchains, and combine on-chain and off-chain data in a single response.\nIdentity APIs. Map addresses and transactions across various sources, including ENS, Farcaster, Lens, POAP, Dapps, and Marketplaces.\nSnapshots. Query historical data, balances, and transfers, within the time range or length of holding.\nCollaboration built-in. Browse, remix, or fork from a public marketplace of queries and APIs\nMore details for developers\nAccess every on-chain transaction since the genesis block along with dapp-specific events and NFT marketplace data\nSimultaneously query and combine on-chain and off-chain data\nPowerful features such as resized NFT media, date snapshots, comparators, Farcaster, POAPs, primary ENS, and more\nLeverage the power of GraphQL, more advanced than Rest APIs: Get at just the data you require in single-complex-queries\nIntegrate into any web2/3 app without any additional infrastructure\nWebhooks for streaming updates (coming soon)\nOpen source schemas and APIs for adding additional data, dapps, and protocols into Airstack\nGet started today with Ethereum and Polygon. More blockchains coming soon\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/index.txt"}}],["11",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all tokens held by vitalik.eth on Ethereum\n\nquery getAllTokensBy {\n  TokenBalances(input: {filter: { owner: {_eq: \"vitalik.eth\"}}, limit: 10, blockchain: ethereum}) {\n    TokenBalance {\n      amount\n      chainId\n      id\n      lastUpdatedBlock\n      lastUpdatedTimestamp\n      owner {\n        addresses\n      }\n      tokenAddress\n      tokenId\n      token {\n        name\n        symbol\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt1.txt"}}],["12",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all the token holders and their ENS names for Tether\n\nquery GetTokenBalances {\n  TokenBalances(\n    input: {blockchain: ethereum, limit: 10, filter: {tokenAddress: {_eq: \"0xdac17f958d2ee523a2206206994597c13d831ec7\"}}}\n  ) {\n    TokenBalance {\n      amount\n      chainId\n      owner {\n        addresses\n        domains {\n          id\n          name\n          owner\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt10.txt"}}],["13",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all the token holders and their ENS names for Nouns DAO\n\nquery GetTokenHolders {\n  TokenBalances(\n    input: {filter: {tokenAddress: {_eq: \"0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03\"}}, limit: 10, blockchain: ethereum}\n  ) {\n    TokenBalance {\n      owner {\n        addresses\n        primaryDomain {\n          name\n        }\n        domains {\n          name\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt11.txt"}}],["14",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor the Ethereum token Matic, show me all token holders and the NFTs they hold\n\nquery GetTokenHolders {\n  TokenBalances(\n    input: {blockchain: ethereum, filter: {tokenAddress: {_eq: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\"}}, limit: 10}\n  ) {\n    TokenBalance {\n      owner {\n        identity\n        addresses\n        tokenBalances {\n          tokenNfts {\n            tokenId\n            contentType\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt12.txt"}}],["15",{"pageContent":"Get all meta data about the BAYC NFT collection including a summary of the traits distribution\n\n```GraphQL\nquery QB1 {\n  Tokens(input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}}, blockchain: ethereum}) {\n    Token {\n      address\n      baseURI\n      chainId\n      contractMetaDataURI\n      decimals\n      id\n      lastTransferBlock\n      lastTransferHash\n      lastTransferTimestamp\n      name\n      rawContractMetaData\n      symbol\n      tokenBalances {\n        owner {\n          addresses\n        }\n        amount\n      }\n      tokenNfts {\n        id\n        tokenId\n        tokenURI\n        metaData {\n          name\n        }\n        contentValue {\n          image {\n            large\n            medium\n            original\n            small\n            extraSmall\n          }\n        }\n      }\n      tokenTraits\n      totalSupply\n      type\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}\n```","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt13.txt"}}],["16",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all Farcaster usernames and Eth associated addresses\n\nquery GetAllFarcasterUsernamesAndEthAddresses {\n  Socials(input: {filter: {dappName: {_eq: farcaster}}, blockchain: ethereum, limit: 10}) {\n    Social {\n      profileName\n      userAssociatedAddresses\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt2.txt"}}],["17",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor this list of ENS addresses, show me all NFTs they own, including images: dwr.eth, vitalik.eth, balajis.eth\n\nquery GetNFTsByENSAddresses {\n  TokenBalances(\n    input: {filter: {owner: {_in: [\"dwr.eth\", \"vitalik.eth\", \"balajis.eth\"]}, tokenType: {_in: [ERC1155, ERC721]}}, blockchain: ethereum, limit: 10}\n  ) {\n    TokenBalance {\n      tokenAddress\n      amount\n      owner {\n        addresses\n        primaryDomain {\n          id\n        }\n        domains {\n          id\n        }\n      }\n      tokenNfts {\n        contentValue {\n          image {\n            extraSmall\n            small\n            medium\n            large\n            original\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt3.txt"}}],["18",{"pageContent":"Here is an example prompt to generate a graphQL query: \nShow me all Milady token holders, their ENS names, and the token images\n\nquery MiladyHoldersENSAndImages {\n  TokenBalances(\n    input: {filter: {tokenAddress: {_eq: \"0x5Af0D9827E0c53E4799BB226655A1de152A425a5\"}, tokenType: {_in: [ERC1155, ERC721]}}, blockchain: ethereum, limit: 50}\n  ) {\n    TokenBalance {\n      owner {\n        addresses\n        primaryDomain {\n          name\n        }\n        domains {\n          name\n        }\n      }\n      tokenNfts {\n        contentValue {\n          image {\n            original\n          }\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt4.txt"}}],["19",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all tokens held by wallet address 0x540cb04ebab67e05a620b97bb367ac5e4ed68f09\n\nquery GetTokensByWalletAddress {\n  TokenBalances(input: {filter: { owner: {_eq: \"0x540cb04ebab67e05a620b97bb367ac5e4ed68f09\"}}, limit: 10, blockchain: ethereum}) {\n    TokenBalance {\n      amount\n      chainId\n      id\n      lastUpdatedBlock\n      lastUpdatedTimestamp\n      owner {\n        addresses\n      }\n      tokenAddress\n      tokenId\n      tokenType\n      token {\n        name\n        symbol\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt5.txt"}}],["20",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet all metadata about the BAYC NFT collection including a summary of the traits distribution\n\nquery GetNFTMetadata {\n  Tokens(input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}}, blockchain: ethereum}) {\n    Token {\n      address\n      baseURI\n      chainId\n      contractMetaDataURI\n      decimals\n      id\n      lastTransferBlock\n      lastTransferHash\n      lastTransferTimestamp\n      name\n      rawContractMetaData\n      symbol\n      tokenBalances {\n        owner {\n          addresses\n        }\n        amount\n      }\n      tokenNfts {\n        id\n        tokenId\n        tokenURI\n        metaData {\n          name\n        }\n        contentValue {\n          image {\n            large\n            medium\n            original\n            small\n            extraSmall\n          }\n        }\n      }\n      tokenTraits\n      totalSupply\n      type\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt6.txt"}}],["21",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGive me recent transfers of DAI token\n\nquery RecentDaiTransfers {\n  TokenTransfers(\n    input: {\n      filter: {tokenAddress: {_eq: \"0x6b175474e89094c44da98b954eedeac495271d0f\"}},\n      blockchain: ethereum,\n      limit: 10,\n      order: {blockTimestamp: DESC}\n    }\n  ) {\n    TokenTransfer {\n      amount\n      blockNumber\n      blockTimestamp\n      from {\n        addresses\n      }\n      to {\n        addresses\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt7.txt"}}],["22",{"pageContent":"Here is an example prompt to generate a graphQL query: \nFor ENS dwr.eth, get Farcaster name, Farcaster account details, connected address, and all token balances and images\n\nquery GetIdentity {\n  Wallet(input: {identity: \"dwr.eth\"}) {\n    socials {\n      dappName\n      profileName\n      profileCreatedAtBlockTimestamp\n      userAssociatedAddresses\n    }\n    tokenBalances {\n      tokenAddress\n      amount\n      tokenId\n      tokenType\n      tokenNfts {\n        contentValue {\n          image {\n            original\n          }\n        }\n        token {\n          name\n        }\n      }\n    }\n  }\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt8.txt"}}],["23",{"pageContent":"Here is an example prompt to generate a graphQL query: \nGet the token transfer history of the Mutant Apes NFT Collection on Ethereum\n\nquery GetTokenTransferHistroy {\n  TokenTransfers(\n    input: {filter: {tokenAddress: {_eq: \"0x60e4d786628fea6478f785a6d7e704777c86a7c6\"}}, blockchain: ethereum}\n  ) {\n    TokenTransfer {\n      amount\n      amounts\n      blockNumber\n      blockTimestamp\n      blockchain\n      chainId\n      from {\n        addresses\n      }\n      to {\n        addresses\n      }\n      tokenType\n    }\n  }\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/prompt9.txt"}}],["24",{"pageContent":"The TokenBalances API covers the owners and balances of ERC20, ERC721, and ERC1155 tokens.\n\nThese are the available filters for the TokenBalances API:\n\ninput TokenBalanceFilter {\n  owner: # Identity: blockchain address, domain name, social identity\n  tokenAddress: # Token contract address on the blockchain (ERC20, ERC721, ERC1155)\n  tokenId: # Unique NFT token ID\n  tokenType: # ERC20, ERC721, ERC1155\n}\n\nThis is the schema for the TokenBalances API:\n\ntype TokenBalance {\n  amount: String! # Token balance amount\n  blockchain: Blockchain # Blockchain where the token balance is located\n  chainId: String! # Airstack unique identifier for the blockchain\n  id: ID! # Airstack unique identifier for the data point\n  lastUpdatedBlock: Int! # Block number when the token balance was last updated\n  lastUpdatedTimestamp: Time # Timestamp when the token balance was last updated\n  owner: Wallet! # **Nested query** allowing to retrieve address, domain names, and social profiles of the owner\n  token: Token # **Nested query** to get token contract level data\n  tokenAddress: Address! # Token contract address\n  tokenId: String # Unique NFT token ID, if applicable\n  tokenNfts: # **Nested query** allowing to get NFT token data (images, traits, etc.)\n  tokenTransfer: # **Nested query** with token transfer history and details\n  tokenType: TokenType # ERC20, ERC721, or ERC1155\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokenBalances.txt"}}],["25",{"pageContent":"The TokenTransfers API delivers information on token transfers between wallets & contracts.\n\nThese are the available filters for the TokenTransfers API:\n\ninput TokenTransferFilter {\n  from: # Identity: blockchain address, domain name, social identity\n  to: # Identity: blockchain address, domain name, social identity\n  tokenAddress: # Token contract address (ERC20, ERC721, ERC1155(\n  tokenId: # Unique NFT token ID\n  tokenType: # ERC20, ERC721, ERC1155\n  transactionHash: # transaction hash\n}\n\nThis is the schema for the TokenTransfers API:\n\ntype TokenTransfer {\n  amount: String # Amount transferred in the token transfer\n  amounts: [String] # ERC1155 batch transfer specific amounts\n  blockchain: Blockchain # Blockchain where the token transfer took place\n  blockNumber: Int # Block number of the token transfer\n  blockTimestamp: Time # Timestamp of the token transfer\n  chainId: String # Airstack unique identifier for the blockchain\n  from:  # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\n  id: ID # Airstack unique identifier for the token transfer\n  operator:  # **Nested query** - operator (contract) wallet-related information, including address, domains, social profile, other token balances, and transfer history.\n  to:  # **Nested query** - wallet-related information, including address, domains, social profile, other token balances, and transfer history.\n  token: Token # **Nested query** - token contract level information\n  tokenAddress: Address # Token contract address\n  tokenId: String # Token ID associated with the token transfer, if applicable\n  tokenIds: [String] # List of token IDs associated with the token transfer, if applicable\n  tokenNft: TokenNft # **Nested query** - individual NFT token level data\n  tokenType: TokenType # Token type (ERC20, ERC721, or ERC1155)\n  transactionHash: String! # Transaction hash of the token transfer\n  type: String # Type of the token transfer\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokenTransfers.txt"}}],["26",{"pageContent":"The TokenNFTs API provides detailed data about a specific NFT token within an NFT Collection, either an ERC721 or ERC1155 contract. You can use this API to return token-specific metadata, including traits, and resized images.\n\nThese are the available filters for the TokenNFTs API:\n\ninput TokenNftFilter {\n  address: # Contract address (ERC721, ERC1155)\n  metaData: # allows querying by NFT Token Name, or specific trait or attribute.\n  tokenId: # Unique NFT token ID\n}\n\nThis is the schema for the Wallet API:\n\ntype TokenNft {\n  address: Address! # NFT contract address on the blockchain\n  blockchain: Blockchain # Blockchain where the NFT token is deployed\n  chainId: String! # Airstack unique identifier for the blockchain\n  contentType: String # Content type of the NFT token (image, video, audio, etc.)\n  contentValue: Media # NFT Media - resized images, animation, videos, etc.\n  #currentHolderCount: # Number of current holders of the token NFT - being fixed\n  id: # Airstack unique identifier for the NFT token\n  lastTransferBlock: # Block number of the token NFT's most recent transfer\n  lastTransferHash: # Hash of the token NFT's most recent transfer\n  lastTransferTimestamp: # Timestamp of the token NFT's most recent transfer\n  metaData: NftMetadata # Metadata associated with the NFT token\n  nftSaleTransactions: # **Nested query** allowing to retrieve token sale transactions\n  rawMetaData: # NFT token metadata as defined in the contract\n  token: # **Nested query** allowing to query contract level data\n  tokenBalances: # **Nested query** with token balance data & owner data\n  tokenId: IntString! # Unique NFT token ID\n  tokenTransfers: # **Nested query** with token transfers data\n  tokenURI: String # URI for the token NFT's resources\n  totalSupply: String # Total supply of the NFT token\n  type: TokenType # Type of NFT - ERC721 or ERC1155\n}","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokennfts.txt"}}],["27",{"pageContent":"The Tokens API retrieves high-level information on ERC20 tokens, ERC721 tokens (also known as NFT contracts, \"Collections,\" or \"NFT Collections,\" containing multiple tokens), and ERC1155 tokens (also called NFT contracts, \"Collections,\" or \"NFT Collections,\" containing several tokens).\n\nThese are the available filters for the Tokens API:\n\ninput TokenFilter {\n  address: # Token contract address on the blockchain (ERC20, ERC721, ERC1155)\n  name:  # Name of the contract (e.g. \"Moonbirds\"). Note that this will fetch all contracts with the name \"Moonbirds\"\n  symbol: # Symbol of the contract (e.g. \"BAYC\"). Note - it will return all contracts that have the same symbol.\n  type: # ERC20, ERC721, ERC1155\n}\n\nThis is the schema for the Tokens API:\n\ntype Token {\n  address: Address! # Token contract address on the blockchain\n  baseURI: String # Returns the base URI\n  blockchain: Blockchain # Blockchain where the token is deployed\n  chainId: String # Airstack unique identifier for the blockchain\n  contractMetaData: ContractMetadata # Token's contract metadata object\n  contractMetaDataURI: String # URI for the token's contract metadata\n  currentHolderCount: Int # Number of current token holders\n  decimals: Int # Number of decimal places for the token's smallest unit\n  id: ID # Airstack unique identifier for the contract\n  lastTransferBlock: Int # Block number of the token's most recent transfer\n  lastTransferHash: String # Hash of the token's most recent transfer\n  lastTransferTimestamp: Time # Timestamp of the token's most recent transfer\n  logo: # Logo image for the contract in various sizes (if available)\n  name: String # Token contract name\n  rawContractMetaData: # Token contract metadata as it appears inside the contact\n  symbol: String # Token contract symbol (ticker)\n  tokenBalances: # **Nested query** - allows querying Token Balance information\n  tokenNfts: # **Nested query** - individual NFT token data\n  tokenTraits: Map # Returns count of all token attribute types and values\n  totalSupply: String # Total supply of the token\n  type: Tokentype # ERC20, ERC721, or ERC1155\n}\n```\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokens.txt"}}],["28",{"pageContent":"Get all meta data about the BAYC NFT collection including a summary of the traits distribution\n\n```GraphQL\nquery QB1 {\n  Tokens(input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}}, blockchain: ethereum}) {\n    Token {\n      address\n      baseURI\n      chainId\n      contractMetaDataURI\n      decimals\n      id\n      lastTransferBlock\n      lastTransferHash\n      lastTransferTimestamp\n      name\n      rawContractMetaData\n      symbol\n      tokenBalances {\n        owner {\n          addresses\n        }\n        amount\n      }\n      tokenNfts {\n        id\n        tokenId\n        tokenURI\n        metaData {\n          name\n        }\n        contentValue {\n          image {\n            large\n            medium\n            original\n            small\n            extraSmall\n          }\n        }\n      }\n      tokenTraits\n      totalSupply\n      type\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}\n```\n\nFor the Moonbirds NFT collection, get the holders, the holder’s ENS names, and their Farcaster profile names if they have one\n\n```GraphQL\nquery Moonbirds_ENS_FC {\n  Tokens(\n    input: {filter: {address: {_eq: \"0x23581767a106ae21c074b2276d25e5c3e136a68b\"}}, blockchain: ethereum}\n  ) {\n    Token {\n      address\n      baseURI\n      chainId\n      contractMetaDataURI\n      # currentHolderCount - being fixed\n      decimals\n      id\n      symbol\n      name\n      tokenBalances {\n        owner {\n          addresses\n          identity\n          socials {\n            profileName\n          }\n          domains {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}\n```\n\nGet the contract information for the Matic token\n\n```GraphQL\n{\n  Token(\n    input: {address: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\", blockchain: ethereum}\n  ) {\n    name\n    symbol\n    decimals\n    totalSupply\n    lastTransferBlock\n    lastTransferTimestamp\n  }\n}\n```\n\nFetch the Ethereum contract address for BAYC\n\n```GraphQL\n{\n  Tokens(\n    input: {filter: {name: {_eq: \"Bored Ape Yacht Club\"}, type: {_eq: ERC721}}, blockchain: ethereum, limit: 1}\n  ) {\n    Token {\n      address\n      name\n    }\n  }\n}\n```\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokensAPI_examples.txt"}}],["29",{"pageContent":"Example: Get all holders of the BAYC NFT Collection, the NFTs they hold, traits, and resized images\n\n```GraphQL\nquery QB2 {\n  TokenNfts(input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}}, blockchain: ethereum}) {\n    TokenNft {\n      address\n      chainId\n      contentType\n      contentValue {\n        image {\n          extraSmall\n          original\n          large\n        }\n      }\n      #currentHolderCount - being fixed\n      id\n      lastTransferBlock\n      lastTransferHash\n      lastTransferTimestamp\n      metaData {\n        animationUrl\n        attributes {\n          trait_type\n          value\n        }\n        backgroundColor\n        description\n        image\n        externalUrl\n        imageData\n        name\n        youtubeUrl\n      }\n      rawMetaData\n      token {\n        id\n      }\n      tokenBalances {\n        id\n      }\n      tokenId\n      tokenURI\n      totalSupply\n      #transferCount - being fixed\n      type\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}\n```\n\nExample: Get tokens in the BAYC NFT Collection and the traits of each NFT\n\n```GraphQL\nquery QB4 {\n  TokenNfts(input: {filter: { address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}, metaData: {attributes: {trait_type: {_eq: \"Background\"}, value: {_eq: \"Orange\"}}}}, blockchain: ethereum}) {\n    TokenNft {\n      address\n      chainId\n      id\n      metaData {\n        animationUrl\n        attributes {\n          trait_type\n          value\n        }\n        description\n        image\n      }\n      tokenId\n    }\n    pageInfo {\n      nextCursor\n      prevCursor\n    }\n  }\n}\n```\n\nExample: Get sales history for the tokens in the BAYC NFT Collection with trait Background Orange\n\n```GraphQL\nquery QB16 {\n  TokenNfts(\n    input: {filter: {address: {_eq: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"}, metaData: {attributes: {trait_type: {_eq: \"Background\"}, value: {_eq: \"Orange\"}}}}, blockchain: ethereum}\n  ) {\n    TokenNft {\n      address\n      tokenId\n      token {\n        name\n        symbol\n      }\n      nftSaleTransactions {\n        dappSlug\n        formattedPaymentAmount\n        formattedFeeAmountInUSDC\n        formattedPaymentAmountInNativeToken\n        paymentToken {\n          address\n          name\n          decimals\n          symbol\n        }\n        blockNumber\n        blockTimestamp\n        nfts {\n          tokenId\n          tokenType\n        }\n      }\n      metaData {\n        attributes {\n          trait_type\n          value\n        }\n      }\n      contentType\n      contentValue {\n        image {\n          extraSmall\n          large\n          medium\n          original\n        }\n      }\n    }\n  }\n}\n```\n\nExample: Get the token transfer and sales history for the Mutant Ape Yacht Club NFT Collection on Ethereum\n\n```GraphQL\n{\n  TokenNfts(\n    input: {filter: {address: {_eq: \"0x60e4d786628fea6478f785a6d7e704777c86a7c6\"}}, limit: 10, blockchain: ethereum}\n  ) {\n    TokenNft {\n      tokenId\n      tokenTransfers {\n        from {\n          identity\n        }\n        to {\n          identity\n        }\n        blockTimestamp\n        transactionHash\n      }\n      nftSaleTransactions {\n        from {\n          identity\n        }\n        to {\n          identity\n        }\n        blockTimestamp\n        transactionHash\n        paymentAmount\n        paymentToken {\n          symbol\n        }\n      }\n    }\n  }\n}\n```\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/tokensNFTsAPI_examples.txt"}}],["30",{"pageContent":"The Wallet APIs deliver comprehensive data about a specific wallet address, including the tokens they currently possess, the domain names they own, their token transfer and sale history, and their on-chain social profiles (like ENS, Farcaster).\n\nFrom the Wallet API it’s possible to create complex queries using nested queries, such as: Get the primary ENS, the Farcaster user name, the Farcaster connected Addresses, all tokens held by the wallet, all NFT Sales by the wallet, all token transfers.\n\nThese are the available filters for the Wallet API:\n\ninput WalletInput {\n  identity: # Identity: blockchain address, domain name, social identity\n}\n\nThis is the schema for the Wallet API:\n\ntype Wallet {\n  addresses: Addresses! # returns addresses associated with the identity input\n  domains: # Nested query - allows querying domains owned by the address\n  identity: # return identity passed from the input\n  nftSaleTransactions: # Nested query - allows querying NFT Sales by the address\n  primaryDomain: # Nested query - allows returning primary domains, if applicable\n  socials: # returns social profile information related to the address\n  tokenBalances: # Nested query - allows returning token balances\n  tokenTransfers: # Nested query - allows returning token transfers and related information\n\n}\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/wallets.txt"}}],["31",{"pageContent":"For ENS dwr.eth, get Farcaster name, Farcaster account details, connected address, and all token balances and images\n\n```GraphQL\nquery identity {\n  Wallet(input: {identity: \"dwr.eth\"}) {\n    socials {\n      dappName\n      profileName\n      profileCreatedAtBlockTimestamp\n      userAssociatedAddresses\n    }\n    tokenBalances {\n      tokenAddress\n      amount\n      tokenId\n      tokenType\n      tokenNfts {\n        contentValue {\n          image {\n            original\n          }\n        }\n        token {\n          name\n        }\n      }\n    }\n  }\n}\n```\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/walletsAPI_examples.txt"}}],["32",{"pageContent":"Working with GraphQL\n\nIn GraphQL, logical comparators like \\_and , \\_nor, and \\_or are used to combine multiple filtering conditions, allowing you to create more complex queries. These logical comparators can only be used between unique filter inputs only. In order to add comparators to one specific filter check the information below. Here's a brief explanation of each:\n\nUsing GraphQL logical comparators\n\\_and: AND - Combines multiple filtering conditions, and only returns the data that meets all the specified conditions. Note: the relationship between multiple selected filters is always AND by default.\n\\_nor: NOR (Not OR) - Combines multiple filtering conditions, and only returns the data that does not meet any of the specified conditions.\n\n\\_or: OR - Combines multiple filtering conditions, and returns the data that meets at least one of the specified conditions.\n\nIn addition to the filtering conditions, Airstack GraphQL also has the following comparators which are used to filter data in queries based on specified conditions. They are shorthand for various comparison operations:\n\\_eq: Equals - Filters the data where the specified field is equal to the provided value.\n\\_gt: Greater Than - Filters the data where the specified field is greater than the provided\n\\_gte: Greater Than or Equal - Filters the data where the specified field is greater than or equal to the provided value.\n\\_lt: Less Than - Filters the data where the specified field is less than the provided value.\n\\_lte: Less Than or Equal - Filters the data where the specified field is less than or equal to the provided value.\n\\_ne: Not Equal - Filters the data where the specified field is not equal to the provided value.\n\\_in: In - Filters the data where the specified field's value is within the provided array of values.\n\n\\_nin: Not In - Filters the data where the specified field's value is not within the provided array of values.\n","metadata":{"source":"/mnt/d/Entrepreneurship 2017 -/Investment and cryptocurrency/Web3_coding/ETHGlobal_Tokyo_hackathon_2023/apps/backend/documents/airstack/workingWithGraphQL.txt"}}]]